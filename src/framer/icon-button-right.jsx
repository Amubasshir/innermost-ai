// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project bee694db1d314f12 "Innermost AI (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-VAWW4KIH.js";

// virtual:icon-button-right
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/icon-button-right-cgeB.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	SVG,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var enabledGestures = {
	SFpBNvzIX: {
		hover: true,
	},
};
var cycleOrder = ["SFpBNvzIX", "Mnoc5jijI"];
var serializationHash = "framer-K3g1A";
var variantClassNames = {
	Mnoc5jijI: "framer-v-jkfqf4",
	SFpBNvzIX: "framer-v-1wd3oif",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	"Variant 1": "SFpBNvzIX",
	inactive: "Mnoc5jijI",
};
var getProps = ({ click, height, id, width, ...props }) => {
	return {
		...props,
		NTMsYmn8K: click ?? props.NTMsYmn8K,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "SFpBNvzIX",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, NTMsYmn8K, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "SFpBNvzIX",
		enabledGestures,
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTaphcluyh = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (NTMsYmn8K) {
			const res = await NTMsYmn8K(...args);
			if (res === false) return false;
		}
	});
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1wd3oif",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"SFpBNvzIX"}
						onTap={onTaphcluyh}
						ref={refBinding}
						style={{
							backgroundColor: "rgb(36, 36, 35)",
							borderBottomLeftRadius: 9999,
							borderBottomRightRadius: 9999,
							borderTopLeftRadius: 9999,
							borderTopRightRadius: 9999,
							opacity: 1,
							...style,
						}}
						variants={{
							"SFpBNvzIX-hover": {
								backgroundColor:
									"var(--token-a046c569-860e-4698-b73a-6f4a544ad189, rgb(249, 120, 28))",
								opacity: 0.6,
							},
							Mnoc5jijI: {
								opacity: 0.2,
							},
						}}
						{...addPropertyOverrides(
							{
								"SFpBNvzIX-hover": {
									"data-framer-name": void 0,
								},
								Mnoc5jijI: {
									"data-framer-name": "inactive",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<SVG
							className={"framer-vgh0to"}
							data-framer-name={"Arrow Left"}
							fill={"rgba(0,0,0,1)"}
							intrinsicHeight={24}
							intrinsicWidth={24}
							layoutDependency={layoutDependency}
							layoutId={"I204:4851;145:424"}
							svg={
								'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M13.7051 4.28406C13.3117 3.89643 12.6785 3.90112 12.2909 4.29453C11.9033 4.68793 11.908 5.32108 12.3014 5.7087L17.6717 11.0001L4.00054 11.0001C3.44825 11.0001 3.00054 11.4478 3.00054 12.0001C3.00054 12.5524 3.44826 13.0001 4.00054 13.0001L17.6651 13.0001L12.3014 18.285C11.908 18.6726 11.9033 19.3058 12.2909 19.6992C12.6785 20.0926 13.3117 20.0973 13.7051 19.7096L20.6293 12.8873C21.1262 12.3976 21.1262 11.5961 20.6293 11.1064L13.7051 4.28406Z" fill="white"/>\n</svg>\n'
							}
							withExternalLayout={true}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-K3g1A.framer-ir6ach, .framer-K3g1A .framer-ir6ach { display: block; }",
	".framer-K3g1A.framer-1wd3oif { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: visible; padding: 8px 12px 8px 12px; position: relative; width: min-content; }",
	".framer-K3g1A .framer-vgh0to { flex: none; height: 24px; position: relative; width: 24px; }",
];
var Framero3MgUt4LG = withCSS(Component, css, "framer-K3g1A");
var stdin_default = Framero3MgUt4LG;
Framero3MgUt4LG.displayName = "icon button right";
Framero3MgUt4LG.defaultProps = {
	height: 40,
	width: 48,
};
addPropertyControls(Framero3MgUt4LG, {
	variant: {
		options: ["SFpBNvzIX", "Mnoc5jijI"],
		optionTitles: ["Variant 1", "inactive"],
		title: "Variant",
		type: ControlType.Enum,
	},
	NTMsYmn8K: {
		title: "Click",
		type: ControlType.EventHandler,
	},
});
addFonts(
	Framero3MgUt4LG,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:icon-button-right
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "Mnoc5jijI",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders IconButtonRightFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var icon_button_right_default = ComponentWithRoot;
export { icon_button_right_default as default };
