// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project bee694db1d314f12 "Innermost AI (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-VAWW4KIH.js";

// virtual:cta
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/CTA-uXp7.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	RichText,
	SVG,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var enabledGestures = {
	LGHZREMns: {
		hover: true,
	},
};
var serializationHash = "framer-fBfI8";
var variantClassNames = {
	LGHZREMns: "framer-v-z8e2v4",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ height, id, title, width, ...props }) => {
	return {
		...props,
		nlmuvNmBV: title ?? props.nlmuvNmBV ?? "Ed",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, nlmuvNmBV, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "LGHZREMns",
		enabledGestures,
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-z8e2v4",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"LGHZREMns"}
						ref={refBinding}
						style={{
							backgroundColor: "rgba(0, 0, 0, 0.5)",
							borderBottomLeftRadius: 100,
							borderBottomRightRadius: 100,
							borderTopLeftRadius: 100,
							borderTopRightRadius: 100,
							...style,
						}}
						variants={{
							"LGHZREMns-hover": {
								backgroundColor: "rgb(0, 0, 0)",
							},
						}}
						{...addPropertyOverrides(
							{
								"LGHZREMns-hover": {
									"data-framer-name": void 0,
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<RichText
							__fromCanvasComponent={true}
							className={"framer-dzoaxy"}
							data-framer-name={"Ed"}
							fonts={["GF;Poppins-regular"]}
							layoutDependency={layoutDependency}
							layoutId={"obnTSSxw0"}
							style={{
								"--extracted-r6o4lv": "rgb(255, 255, 255)",
								"--framer-paragraph-spacing": "0px",
							}}
							text={nlmuvNmBV}
							verticalAlignment={"center"}
							withExternalLayout={true}
						>
							<React.Fragment>
								<motion.p
									style={{
										"--font-selector": "R0Y7UG9wcGlucy1yZWd1bGFy",
										"--framer-font-family":
											'"Poppins", "Poppins Placeholder", sans-serif',
										"--framer-letter-spacing": "-0.03em",
										"--framer-text-color":
											"var(--extracted-r6o4lv, rgb(255, 255, 255))",
									}}
								>
									{"Ed"}
								</motion.p>
							</React.Fragment>
						</RichText>
						<SVG
							className={"framer-1mxga6p"}
							data-framer-name={"play"}
							fill={"rgba(0,0,0,1)"}
							intrinsicHeight={24}
							intrinsicWidth={25}
							layoutDependency={layoutDependency}
							layoutId={"KrqZ30x_A"}
							style={{
								rotate: 5,
							}}
							svg={
								'<svg width="25" height="24" viewBox="-1 -1 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M9.9405 7.48423C9.07625 7.08407 8.09987 7.75878 8.16855 8.70868L8.5654 14.1975C8.63408 15.1474 9.69737 15.6746 10.4951 15.1543L16.0078 11.5584C16.2363 11.4094 16.3658 11.1482 16.3461 10.8762C16.3265 10.6042 16.1607 10.3643 15.9132 10.2497L9.9405 7.48423ZM10.638 1.26275C5.12956 1.66102 0.986927 6.44938 1.3852 11.9579C1.78347 17.4663 6.57184 21.609 12.0803 21.2107C17.5888 20.8124 21.7314 16.024 21.3331 10.5156C20.9349 5.00711 16.1465 0.864475 10.638 1.26275ZM2.8813 11.8497C2.54276 7.16748 6.064 3.09738 10.7462 2.75884C15.4284 2.42031 19.4985 5.94155 19.837 10.6237C20.1756 15.3059 16.6543 19.376 11.9721 19.7146C7.28993 20.0531 3.21983 16.5319 2.8813 11.8497Z" fill="white"/>\n</svg>\n'
							}
							withExternalLayout={true}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-fBfI8.framer-wo5x88, .framer-fBfI8 .framer-wo5x88 { display: block; }",
	".framer-fBfI8.framer-z8e2v4 { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 4px; height: min-content; justify-content: center; overflow: hidden; padding: 4px 6px 4px 12px; position: relative; width: min-content; will-change: var(--framer-will-change-override, transform); }",
	".framer-fBfI8 .framer-dzoaxy { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-fBfI8 .framer-1mxga6p { flex: none; height: 24px; position: relative; width: 25px; }",
];
var FramerRXsaILJI3 = withCSS(Component, css, "framer-fBfI8");
var stdin_default = FramerRXsaILJI3;
FramerRXsaILJI3.displayName = "CTA";
FramerRXsaILJI3.defaultProps = {
	height: 32,
	width: 65,
};
addPropertyControls(FramerRXsaILJI3, {
	nlmuvNmBV: {
		defaultValue: "Ed",
		displayTextArea: false,
		title: "Title",
		type: ControlType.String,
	},
});
addFonts(
	FramerRXsaILJI3,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Poppins",
					source: "google",
					style: "normal",
					url: "https://fonts.gstatic.com/s/poppins/v23/pxiEyp8kv8JHgFVrFJXUc1NECPY.woff2",
					weight: "400",
				},
			],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:cta
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders CtaFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var cta_default = ComponentWithRoot;
export { cta_default as default };
