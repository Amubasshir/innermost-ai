// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project bee694db1d314f12 "Innermost AI (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-VAWW4KIH.js";

// virtual:icon-button-left
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/icon-button-left-K4jk.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	SVG,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var enabledGestures = {
	Mtj4DOMvQ: {
		hover: true,
	},
};
var cycleOrder = ["Mtj4DOMvQ", "z5R_J9jiP"];
var serializationHash = "framer-AVvkr";
var variantClassNames = {
	Mtj4DOMvQ: "framer-v-cwegqm",
	z5R_J9jiP: "framer-v-88bs9u",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	"Variant 1": "Mtj4DOMvQ",
	"Variant 2": "z5R_J9jiP",
};
var getProps = ({ click, height, id, width, ...props }) => {
	return {
		...props,
		LqyozGG0N: click ?? props.LqyozGG0N,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "Mtj4DOMvQ",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, LqyozGG0N, ...restProps } =
		getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "Mtj4DOMvQ",
		enabledGestures,
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTapx25oqb = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (LqyozGG0N) {
			const res = await LqyozGG0N(...args);
			if (res === false) return false;
		}
	});
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-cwegqm",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"Mtj4DOMvQ"}
						onTap={onTapx25oqb}
						ref={refBinding}
						style={{
							backgroundColor: "rgb(36, 36, 35)",
							borderBottomLeftRadius: 9999,
							borderBottomRightRadius: 9999,
							borderTopLeftRadius: 9999,
							borderTopRightRadius: 9999,
							opacity: 1,
							...style,
						}}
						variants={{
							"Mtj4DOMvQ-hover": {
								backgroundColor:
									"var(--token-a046c569-860e-4698-b73a-6f4a544ad189, rgb(249, 120, 28))",
								opacity: 0.6,
							},
							z5R_J9jiP: {
								opacity: 0.2,
							},
						}}
						{...addPropertyOverrides(
							{
								"Mtj4DOMvQ-hover": {
									"data-framer-name": void 0,
								},
								z5R_J9jiP: {
									"data-framer-name": "Variant 2",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<SVG
							className={"framer-1cm98ww"}
							data-framer-name={"Arrow Left"}
							fill={"rgba(0,0,0,1)"}
							intrinsicHeight={24}
							intrinsicWidth={24}
							layoutDependency={layoutDependency}
							layoutId={"I204:4850;145:418"}
							svg={
								'<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">\n<path d="M10.2949 19.7159C10.6883 20.1036 11.3215 20.0989 11.7091 19.7055C12.0967 19.3121 12.092 18.6789 11.6986 18.2913L6.32827 12.9999H19.9995C20.5517 12.9999 20.9995 12.5522 20.9995 11.9999C20.9995 11.4476 20.5517 10.9999 19.9995 10.9999H6.33488L11.6986 5.71501C12.092 5.32739 12.0967 4.69424 11.7091 4.30083C11.3215 3.90743 10.6883 3.90274 10.2949 4.29036L3.37073 11.1127C2.87382 11.6024 2.87382 12.4039 3.37073 12.8936L10.2949 19.7159Z" fill="white"/>\n</svg>\n'
							}
							withExternalLayout={true}
						/>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-AVvkr.framer-aae6g4, .framer-AVvkr .framer-aae6g4 { display: block; }",
	".framer-AVvkr.framer-cwegqm { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: visible; padding: 8px 12px 8px 12px; position: relative; width: min-content; }",
	".framer-AVvkr .framer-1cm98ww { flex: none; height: 24px; position: relative; width: 24px; }",
];
var FramerE3qQzgaPZ = withCSS(Component, css, "framer-AVvkr");
var stdin_default = FramerE3qQzgaPZ;
FramerE3qQzgaPZ.displayName = "icon button left";
FramerE3qQzgaPZ.defaultProps = {
	height: 40,
	width: 48,
};
addPropertyControls(FramerE3qQzgaPZ, {
	variant: {
		options: ["Mtj4DOMvQ", "z5R_J9jiP"],
		optionTitles: ["Variant 1", "Variant 2"],
		title: "Variant",
		type: ControlType.Enum,
	},
	LqyozGG0N: {
		title: "Click",
		type: ControlType.EventHandler,
	},
});
addFonts(
	FramerE3qQzgaPZ,
	[
		{
			explicitInter: true,
			fonts: [],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:icon-button-left
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "Mtj4DOMvQ",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders IconButtonLeftFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var icon_button_left_default = ComponentWithRoot;
export { icon_button_left_default as default };
