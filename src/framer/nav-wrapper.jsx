// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project bee694db1d314f12 "Innermost AI (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { routes } from "./chunks/chunk-VAWW4KIH.js";

// virtual:nav-wrapper
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/nav-wrapper-duTh.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ControlType,
	cx,
	getLoadingLazyAtYPosition,
	Image,
	RichText,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var cycleOrder = ["yQqZLXqQz", "QA4POUuma"];
var serializationHash = "framer-IYSsq";
var variantClassNames = {
	QA4POUuma: "framer-v-1wjpqkv",
	yQqZLXqQz: "framer-v-1gwg1vt",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	"Variant 1": "yQqZLXqQz",
	Phone: "QA4POUuma",
};
var getProps = ({ height, id, width, ...props }) => {
	return {
		...props,
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "yQqZLXqQz",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const { style, className, layoutId, variant, ...restProps } = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "yQqZLXqQz",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1gwg1vt",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"yQqZLXqQz"}
						ref={refBinding}
						style={{
							...style,
						}}
						{...addPropertyOverrides(
							{
								QA4POUuma: {
									"data-framer-name": "Phone",
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-1ep81eq"}
							data-framer-name={"Nav - Desktop"}
							layoutDependency={layoutDependency}
							layoutId={"CAu2CKc7R"}
							style={{
								borderBottomLeftRadius: 100,
								borderBottomRightRadius: 100,
								borderTopLeftRadius: 100,
								borderTopRightRadius: 100,
							}}
						>
							<Image
								background={{
									alt: "",
									fit: "fit",
									loading: getLoadingLazyAtYPosition(
										(componentViewport?.y || 0) + 24 + 0 + 11,
									),
									pixelHeight: 38,
									pixelWidth: 180,
									positionX: "center",
									positionY: "center",
									src: "https://framerusercontent.com/images/8PZ2hXzhoVvptR5ONWeDX2zuAO8.svg",
								}}
								className={"framer-1xgc08c"}
								data-framer-name={"Innermost logo"}
								layoutDependency={layoutDependency}
								layoutId={"jhKnOijpc"}
								{...addPropertyOverrides(
									{
										QA4POUuma: {
											background: {
												alt: "",
												fit: "fit",
												loading: getLoadingLazyAtYPosition(
													(componentViewport?.y || 0) + 24 + 0 + 14.6,
												),
												pixelHeight: 38,
												pixelWidth: 180,
												positionX: "center",
												positionY: "center",
												src: "https://framerusercontent.com/images/8PZ2hXzhoVvptR5ONWeDX2zuAO8.svg",
											},
										},
									},
									baseVariant,
									gestureVariant,
								)}
							/>
							<motion.div
								className={"framer-kpsssp"}
								data-framer-name={"Links"}
								layoutDependency={layoutDependency}
								layoutId={"wDEbwM4mU"}
							>
								<motion.div
									className={"framer-1jynq1j"}
									data-framer-name={"CTAs"}
									layoutDependency={layoutDependency}
									layoutId={"Q1Ltnjkg1"}
								>
									<motion.div
										className={"framer-1ts66x6"}
										data-framer-name={"Buttons"}
										layoutDependency={layoutDependency}
										layoutId={"BHPS4QT9A"}
										style={{
											backgroundColor: "rgba(241, 241, 241, 0)",
											borderBottomLeftRadius: 9999,
											borderBottomRightRadius: 9999,
											borderTopLeftRadius: 9999,
											borderTopRightRadius: 9999,
										}}
									>
										<RichText
											__fromCanvasComponent={true}
											className={"framer-17dtsvq"}
											data-framer-name={"text"}
											fonts={["GF;Poppins-500"]}
											layoutDependency={layoutDependency}
											layoutId={"I204:4796;2:4181"}
											style={{
												"--extracted-r6o4lv": "rgb(36, 36, 35)",
												"--framer-paragraph-spacing": "0px",
											}}
											verticalAlignment={"center"}
											withExternalLayout={true}
										>
											<React.Fragment>
												<motion.p
													style={{
														"--font-selector": "R0Y7UG9wcGlucy01MDA=",
														"--framer-font-family":
															'"Poppins", "Poppins Placeholder", sans-serif',
														"--framer-font-weight": "500",
														"--framer-letter-spacing": "-0.03em",
														"--framer-text-alignment": "center",
														"--framer-text-color":
															"var(--extracted-r6o4lv, rgb(36, 36, 35))",
													}}
												>
													{"Create account"}
												</motion.p>
											</React.Fragment>
										</RichText>
									</motion.div>
									<motion.div
										className={"framer-ndu39p"}
										data-framer-name={"Buttons"}
										layoutDependency={layoutDependency}
										layoutId={"GlRxIaf06"}
										style={{
											backgroundColor:
												"var(--token-b96ed00f-f1b0-47f1-85a2-09f5e52d4710, rgb(36, 36, 35))",
											borderBottomLeftRadius: 9999,
											borderBottomRightRadius: 9999,
											borderTopLeftRadius: 9999,
											borderTopRightRadius: 9999,
										}}
									>
										<RichText
											__fromCanvasComponent={true}
											className={"framer-dfsbnx"}
											data-framer-name={"text"}
											fonts={["GF;Poppins-500"]}
											layoutDependency={layoutDependency}
											layoutId={"I204:4797;2:4181"}
											style={{
												"--extracted-r6o4lv": "rgb(255, 255, 255)",
												"--framer-paragraph-spacing": "0px",
											}}
											verticalAlignment={"center"}
											withExternalLayout={true}
										>
											<React.Fragment>
												<motion.p
													style={{
														"--font-selector": "R0Y7UG9wcGlucy01MDA=",
														"--framer-font-family":
															'"Poppins", "Poppins Placeholder", sans-serif',
														"--framer-font-weight": "500",
														"--framer-letter-spacing": "-0.03em",
														"--framer-text-alignment": "center",
														"--framer-text-color":
															"var(--extracted-r6o4lv, rgb(255, 255, 255))",
													}}
												>
													{"Login"}
												</motion.p>
											</React.Fragment>
										</RichText>
									</motion.div>
								</motion.div>
							</motion.div>
						</motion.div>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-IYSsq.framer-j22329, .framer-IYSsq .framer-j22329 { display: block; }",
	".framer-IYSsq.framer-1gwg1vt { align-content: flex-start; align-items: flex-start; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: flex-start; overflow: visible; padding: 24px 80px 0px 80px; position: relative; width: 1920px; }",
	".framer-IYSsq .framer-1ep81eq { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; height: min-content; justify-content: space-between; overflow: hidden; padding: 11px 0px 11px 0px; position: relative; width: 100%; will-change: var(--framer-will-change-override, transform); }",
	".framer-IYSsq .framer-1xgc08c { aspect-ratio: 4.7984180020401395 / 1; flex: none; gap: 0px; height: var(--framer-aspect-ratio-supported, 38px); overflow: visible; position: relative; width: 180px; }",
	".framer-IYSsq .framer-kpsssp { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 16px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px 2px 0px 2px; position: relative; width: min-content; }",
	".framer-IYSsq .framer-1jynq1j { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: min-content; }",
	".framer-IYSsq .framer-1ts66x6, .framer-IYSsq .framer-ndu39p { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; overflow: visible; padding: 8px 12px 8px 12px; position: relative; width: min-content; }",
	".framer-IYSsq .framer-17dtsvq, .framer-IYSsq .framer-dfsbnx { flex: none; height: auto; position: relative; white-space: pre; width: auto; }",
	".framer-IYSsq.framer-v-1wjpqkv.framer-1gwg1vt { padding: 24px 20px 0px 20px; width: 390px; }",
	".framer-IYSsq.framer-v-1wjpqkv .framer-1xgc08c { height: var(--framer-aspect-ratio-supported, 27px); width: 131px; }",
];
var FramerY6z_pzCyu = withCSS(Component, css, "framer-IYSsq");
var stdin_default = FramerY6z_pzCyu;
FramerY6z_pzCyu.displayName = "nav wrapper";
FramerY6z_pzCyu.defaultProps = {
	height: 84,
	width: 1920,
};
addPropertyControls(FramerY6z_pzCyu, {
	variant: {
		options: ["yQqZLXqQz", "QA4POUuma"],
		optionTitles: ["Variant 1", "Phone"],
		title: "Variant",
		type: ControlType.Enum,
	},
});
addFonts(
	FramerY6z_pzCyu,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Poppins",
					source: "google",
					style: "normal",
					url: "https://fonts.gstatic.com/s/poppins/v23/pxiByp8kv8JHgFVrLGT9V15vFP-KUEg.woff2",
					weight: "500",
				},
			],
		},
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:nav-wrapper
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders NavWrapperFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var nav_wrapper_default = ComponentWithRoot;
export { nav_wrapper_default as default };
