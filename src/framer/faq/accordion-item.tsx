// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project bee694db1d314f12 "Innermost AI (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { Icon } from "../chunks/chunk-TDPQQHTE.js";
import {
	className,
	className2,
	css,
	css2,
	fonts,
	fonts2,
} from "../chunks/chunk-JU6OGMS4.js";
import { routes } from "../chunks/chunk-VAWW4KIH.js";

// virtual:faq/accordion-item
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/FAQ-Accordion-Item-jgF6.js
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	getFontsFromSharedStyle,
	RichText,
	SmartComponentScopedContainer,
	useActiveVariantCallback,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var FeatherFonts = getFonts(Icon);
var enabledGestures = {
	uOtGq34Lc: {
		hover: true,
	},
};
var cycleOrder = ["uOtGq34Lc", "xCMg5qk1J"];
var serializationHash = "framer-UGSrs";
var variantClassNames = {
	uOtGq34Lc: "framer-v-1yt6zlf",
	xCMg5qk1J: "framer-v-xrj8yi",
};
function addPropertyOverrides(overrides, ...variants) {
	const nextOverrides = {};
	variants?.forEach(
		(variant) => variant && Object.assign(nextOverrides, overrides[variant]),
	);
	return nextOverrides;
}
var transition1 = {
	damping: 60,
	delay: 0,
	mass: 1,
	stiffness: 500,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var humanReadableVariantMap = {
	Close: "uOtGq34Lc",
	Open: "xCMg5qk1J",
};
var getProps = ({
	click,
	description,
	height,
	id,
	question,
	width,
	...props
}) => {
	return {
		...props,
		h8iGjYmBY: question ?? props.h8iGjYmBY ?? "Question",
		variant:
			humanReadableVariantMap[props.variant] ?? props.variant ?? "uOtGq34Lc",
		wQl2D9PqT: click ?? props.wQl2D9PqT,
		YgvPXMWsF: description ?? props.YgvPXMWsF ?? "Description",
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className: className3,
		layoutId,
		variant,
		h8iGjYmBY,
		YgvPXMWsF,
		wQl2D9PqT,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		cycleOrder,
		defaultVariant: "uOtGq34Lc",
		enabledGestures,
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const { activeVariantCallback, delay } =
		useActiveVariantCallback(baseVariant);
	const onTaphu9o6t = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (wQl2D9PqT) {
			const res = await wQl2D9PqT(...args);
			if (res === false) return false;
		}
		setVariant("xCMg5qk1J");
	});
	const onTap1eoltyq = activeVariantCallback(async (...args) => {
		setGestureState({
			isPressed: false,
		});
		if (wQl2D9PqT) {
			const res = await wQl2D9PqT(...args);
			if (res === false) return false;
		}
		setVariant("uOtGq34Lc");
	});
	const sharedStyleClassNames = [className2, className];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	const isDisplayed = () => {
		if (baseVariant === "xCMg5qk1J") return true;
		return false;
	};
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-1yt6zlf",
							className3,
							classNames,
						)}
						data-border={true}
						data-framer-name={"Close"}
						data-highlight={true}
						layoutDependency={layoutDependency}
						layoutId={"uOtGq34Lc"}
						onTap={onTaphu9o6t}
						ref={refBinding}
						style={{
							"--border-bottom-width": "1px",
							"--border-color":
								"var(--token-466f412f-31e4-4f7f-a7e6-91a69b113f31, rgba(1, 1, 1, 0))",
							"--border-left-width": "1px",
							"--border-right-width": "1px",
							"--border-style": "solid",
							"--border-top-width": "1px",
							backgroundColor:
								"var(--token-7cbc8809-805f-42b8-a101-1dbda095b6b0, rgb(247, 245, 242))",
							borderBottomLeftRadius: 20,
							borderBottomRightRadius: 20,
							borderTopLeftRadius: 20,
							borderTopRightRadius: 20,
							...style,
						}}
						variants={{
							xCMg5qk1J: {
								"--border-bottom-width": "0px",
								"--border-left-width": "0px",
								"--border-right-width": "0px",
								"--border-top-width": "0px",
							},
						}}
						{...addPropertyOverrides(
							{
								"uOtGq34Lc-hover": {
									"data-framer-name": void 0,
								},
								xCMg5qk1J: {
									"data-framer-name": "Open",
									onTap: onTap1eoltyq,
								},
							},
							baseVariant,
							gestureVariant,
						)}
					>
						<motion.div
							className={"framer-1w69eun"}
							data-framer-name={"Accordion content"}
							layoutDependency={layoutDependency}
							layoutId={"gzKKf5fPF"}
						>
							<motion.div
								className={"framer-1ejnbzp"}
								data-framer-name={"Heading"}
								layoutDependency={layoutDependency}
								layoutId={"wjqVQOWKn"}
							>
								<RichText
									__fromCanvasComponent={true}
									className={"framer-eewxmc"}
									fonts={["Inter"]}
									layoutDependency={layoutDependency}
									layoutId={"WSYW98t_X"}
									style={{
										"--framer-link-text-color": "rgb(0, 153, 255)",
										"--framer-link-text-decoration": "underline",
									}}
									text={h8iGjYmBY}
									verticalAlignment={"top"}
									withExternalLayout={true}
								>
									<React.Fragment>
										<motion.p
											className={"framer-styles-preset-kd5aam"}
											data-styles-preset={"Q4oX12qZZ"}
										>
											{"Question"}
										</motion.p>
									</React.Fragment>
								</RichText>
								<ComponentViewportProvider>
									<SmartComponentScopedContainer
										className={"framer-hezk94-container"}
										isAuthoredByUser={true}
										isModuleExternal={true}
										layoutDependency={layoutDependency}
										layoutId={"eFAc0gYHu-container"}
										nodeId={"eFAc0gYHu"}
										rendersWithMotion={true}
										scopeId={"Dvy9p0TYT"}
										style={{
											rotate: 45,
										}}
										variants={{
											xCMg5qk1J: {
												rotate: 180,
											},
										}}
									>
										<Icon
											color={
												"var(--token-b96ed00f-f1b0-47f1-85a2-09f5e52d4710, rgb(36, 36, 35))"
											}
											height={"100%"}
											iconSearch={"Home"}
											iconSelection={"x"}
											id={"eFAc0gYHu"}
											layoutId={"eFAc0gYHu"}
											mirrored={false}
											selectByList={true}
											style={{
												height: "100%",
												width: "100%",
											}}
											width={"100%"}
										/>
									</SmartComponentScopedContainer>
								</ComponentViewportProvider>
							</motion.div>
							{isDisplayed() && (
								<motion.div
									className={"framer-1924e69"}
									data-framer-name={"Description"}
									layoutDependency={layoutDependency}
									layoutId={"oMHh91RiR"}
								>
									{isDisplayed() && (
										<RichText
											__fromCanvasComponent={true}
											className={"framer-u7bj16"}
											fonts={["Inter"]}
											layoutDependency={layoutDependency}
											layoutId={"Xg28CbGp7"}
											style={{
												"--framer-link-text-color": "rgb(0, 153, 255)",
												"--framer-link-text-decoration": "underline",
											}}
											text={YgvPXMWsF}
											verticalAlignment={"top"}
											withExternalLayout={true}
										>
											<React.Fragment>
												<motion.p
													className={"framer-styles-preset-uknhya"}
													data-styles-preset={"BKN3cZENt"}
												>
													{"Description"}
												</motion.p>
											</React.Fragment>
										</RichText>
									)}
								</motion.div>
							)}
						</motion.div>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css3 = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-UGSrs.framer-zmqu5n, .framer-UGSrs .framer-zmqu5n { display: block; }",
	".framer-UGSrs.framer-1yt6zlf { align-content: center; align-items: center; cursor: pointer; display: flex; flex-direction: column; flex-wrap: nowrap; gap: 0px; height: min-content; justify-content: center; overflow: hidden; padding: 18px 15px 24px 15px; position: relative; width: 854px; will-change: var(--framer-will-change-override, transform); }",
	".framer-UGSrs .framer-1w69eun { align-content: center; align-items: center; display: flex; flex: none; flex-direction: column; flex-wrap: nowrap; gap: 20px; height: min-content; justify-content: center; overflow: visible; padding: 0px; position: relative; width: 94%; }",
	".framer-UGSrs .framer-1ejnbzp { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 40px; height: min-content; justify-content: flex-start; overflow: visible; padding: 0px; position: relative; width: 100%; }",
	".framer-UGSrs .framer-eewxmc { flex: 1 0 0px; height: auto; position: relative; white-space: pre-wrap; width: 1px; word-break: break-word; word-wrap: break-word; }",
	".framer-UGSrs .framer-hezk94-container { flex: none; height: 14px; position: relative; width: 14px; }",
	".framer-UGSrs .framer-1924e69 { align-content: center; align-items: center; display: flex; flex: none; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: min-content; justify-content: center; min-height: 200px; overflow: visible; padding: 0px 30px 0px 0px; position: relative; width: 100%; }",
	".framer-UGSrs .framer-u7bj16 { flex: none; height: auto; position: relative; white-space: pre-wrap; width: 100%; word-break: break-word; word-wrap: break-word; }",
	".framer-UGSrs.framer-v-xrj8yi.framer-1yt6zlf { padding: 35px 15px 35px 15px; }",
	".framer-UGSrs.framer-v-xrj8yi .framer-1924e69 { min-height: unset; }",
	...css2,
	...css,
	'.framer-UGSrs[data-border="true"]::after, .framer-UGSrs [data-border="true"]::after { content: ""; border-width: var(--border-top-width, 0) var(--border-right-width, 0) var(--border-bottom-width, 0) var(--border-left-width, 0); border-color: var(--border-color, none); border-style: var(--border-style, none); width: 100%; height: 100%; position: absolute; box-sizing: border-box; left: 0; top: 0; border-radius: inherit; pointer-events: none; }',
];
var FramerDvy9p0TYT = withCSS(Component, css3, "framer-UGSrs");
var stdin_default = FramerDvy9p0TYT;
FramerDvy9p0TYT.displayName = "FAQ/Accordion Item";
FramerDvy9p0TYT.defaultProps = {
	height: 71,
	width: 854,
};
addPropertyControls(FramerDvy9p0TYT, {
	variant: {
		options: ["uOtGq34Lc", "xCMg5qk1J"],
		optionTitles: ["Close", "Open"],
		title: "Variant",
		type: ControlType.Enum,
	},
	h8iGjYmBY: {
		defaultValue: "Question",
		displayTextArea: false,
		title: "Question",
		type: ControlType.String,
	},
	YgvPXMWsF: {
		defaultValue: "Description",
		displayTextArea: true,
		title: "Description",
		type: ControlType.String,
	},
	wQl2D9PqT: {
		title: "Click",
		type: ControlType.EventHandler,
	},
});
addFonts(
	FramerDvy9p0TYT,
	[
		{
			explicitInter: true,
			fonts: [
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F",
					url: "https://framerusercontent.com/assets/5vvr9Vy74if2I6bQbJvbw7SY1pQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0301, U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116",
					url: "https://framerusercontent.com/assets/EOr0mi4hNtlgWNn9if640EZzXCo.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+1F00-1FFF",
					url: "https://framerusercontent.com/assets/Y9k9QrlZAqio88Klkmbd8VoMQc.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange: "U+0370-03FF",
					url: "https://framerusercontent.com/assets/OYrD2tBIBPvoJXiIHnLoOXnY9M.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF",
					url: "https://framerusercontent.com/assets/JeYwfuaPfZHQhEG8U5gtPDZ7WQ.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2070, U+2074-207E, U+2080-208E, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD",
					url: "https://framerusercontent.com/assets/GrgcKwrN6d3Uz8EwcLHZxwEfC4.woff2",
					weight: "400",
				},
				{
					family: "Inter",
					source: "framer",
					style: "normal",
					unicodeRange:
						"U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB",
					url: "https://framerusercontent.com/assets/b6Y37FthZeALduNqHicBT6FutY.woff2",
					weight: "400",
				},
			],
		},
		...FeatherFonts,
		...getFontsFromSharedStyle(fonts2),
		...getFontsFromSharedStyle(fonts),
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:faq/accordion-item
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {
	base: "uOtGq34Lc",
};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders AccordionItemFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var accordion_item_default = ComponentWithRoot;
export { accordion_item_default as default };
