// @ts-nocheck
/* eslint-disable */
/* This file was generated by Unframer for Framer project bee694db1d314f12 "Innermost AI (copy)", do not edit manually */
"use client";

/**
 * @typedef Locale
 * string
 */

/**
 * @typedef {{
 * children?: React.ReactNode
 * locale?: Locale
 * style?: React.CSSProperties
 * className?: string
 * id?: string
 * ref?: any
 * width?: any
 * height?: any
 * layoutId?: string
}} Props

 */
import { Video } from "./chunks/chunk-G73PZF75.js";
import { routes } from "./chunks/chunk-VAWW4KIH.js";

// virtual:video
import { Fragment as Fragment2 } from "react";
import { ContextProviders } from "unframer";

// /:https://framer.com/m/Video-tIkS.js
import { jsx as _jsx } from "react/jsx-runtime";
import {
	addFonts,
	addPropertyControls,
	ComponentViewportProvider,
	ControlType,
	cx,
	getFonts,
	getPropertyControls,
	SmartComponentScopedContainer,
	useComponentViewport,
	useLocaleInfo,
	useVariantState,
	withCSS,
} from "unframer";
import { LayoutGroup, motion, MotionConfigContext } from "unframer";
import * as React from "react";
import { useRef } from "react";
var VideoFonts = getFonts(Video);
var VideoControls = getPropertyControls(Video);
var serializationHash = "framer-4Vp8H";
var variantClassNames = {
	Y02RqdRfe: "framer-v-aws055",
};
var transition1 = {
	bounce: 0.2,
	delay: 0,
	duration: 0.4,
	type: "spring",
};
var Transition = ({ value, children }) => {
	const config = React.useContext(MotionConfigContext);
	const transition = value ?? config.transition;
	const contextValue = React.useMemo(
		() => ({
			...config,
			transition,
		}),
		[JSON.stringify(transition)],
	);
	return (
		<MotionConfigContext.Provider value={contextValue}>
			{children}
		</MotionConfigContext.Provider>
	);
};
var Variants = motion.create(React.Fragment);
var getProps = ({ file, height, id, uRL, width, ...props }) => {
	return {
		...props,
		kdIOn6qEt:
			uRL ??
			props.kdIOn6qEt ??
			"https://framerusercontent.com/assets/MLWPbW1dUQawJLhhun3dBwpgJak.mp4",
		len7h9FB7: file ?? props.len7h9FB7,
	};
};
var createLayoutDependency = (props, variants) => {
	if (props.layoutDependency)
		return variants.join("-") + props.layoutDependency;
	return variants.join("-");
};
var Component = /* @__PURE__ */ React.forwardRef(function (props, ref) {
	const fallbackRef = useRef(null);
	const refBinding = ref ?? fallbackRef;
	const defaultLayoutId = React.useId();
	const { activeLocale, setLocale } = useLocaleInfo();
	const componentViewport = useComponentViewport();
	const {
		style,
		className,
		layoutId,
		variant,
		len7h9FB7,
		kdIOn6qEt,
		...restProps
	} = getProps(props);
	const {
		baseVariant,
		classNames,
		clearLoadingGesture,
		gestureHandlers,
		gestureVariant,
		isLoading,
		setGestureState,
		setVariant,
		variants,
	} = useVariantState({
		defaultVariant: "Y02RqdRfe",
		ref: refBinding,
		variant,
		variantClassNames,
	});
	const layoutDependency = createLayoutDependency(props, variants);
	const sharedStyleClassNames = [];
	const scopingClassNames = cx(serializationHash, ...sharedStyleClassNames);
	return (
		<LayoutGroup id={layoutId ?? defaultLayoutId}>
			<Variants animate={variants} initial={false}>
				<Transition value={transition1}>
					<motion.div
						{...restProps}
						{...gestureHandlers}
						className={cx(
							scopingClassNames,
							"framer-aws055",
							className,
							classNames,
						)}
						data-framer-name={"Variant 1"}
						layoutDependency={layoutDependency}
						layoutId={"Y02RqdRfe"}
						ref={refBinding}
						style={{
							borderBottomLeftRadius: 2,
							borderBottomRightRadius: 2,
							borderTopLeftRadius: 2,
							borderTopRightRadius: 2,
							...style,
						}}
					>
						<ComponentViewportProvider>
							<SmartComponentScopedContainer
								className={"framer-vstxsk-container"}
								isModuleExternal={true}
								layoutDependency={layoutDependency}
								layoutId={"vB7IgpIq7-container"}
								nodeId={"vB7IgpIq7"}
								rendersWithMotion={true}
								scopeId={"HshAJZ_Fu"}
							>
								<Video
									backgroundColor={"rgba(0, 0, 0, 0)"}
									borderRadius={10}
									bottomLeftRadius={10}
									bottomRightRadius={10}
									controls={true}
									height={"100%"}
									id={"vB7IgpIq7"}
									isMixedBorderRadius={false}
									layoutId={"vB7IgpIq7"}
									loop={true}
									muted={false}
									objectFit={"cover"}
									playing={true}
									posterEnabled={true}
									srcFile={len7h9FB7}
									srcType={"URL"}
									srcUrl={kdIOn6qEt}
									startTime={0}
									style={{
										height: "100%",
										width: "100%",
									}}
									topLeftRadius={10}
									topRightRadius={10}
									volume={25}
									width={"100%"}
								/>
							</SmartComponentScopedContainer>
						</ComponentViewportProvider>
					</motion.div>
				</Transition>
			</Variants>
		</LayoutGroup>
	);
});
var css = [
	"@supports (aspect-ratio: 1) { body { --framer-aspect-ratio-supported: auto; } }",
	".framer-4Vp8H.framer-1pxevw9, .framer-4Vp8H .framer-1pxevw9 { display: block; }",
	".framer-4Vp8H.framer-aws055 { align-content: center; align-items: center; display: flex; flex-direction: row; flex-wrap: nowrap; gap: 10px; height: 627px; justify-content: center; max-width: 1200px; overflow: hidden; padding: 0px; position: relative; width: 700px; will-change: var(--framer-will-change-override, transform); }",
	".framer-4Vp8H .framer-vstxsk-container { flex: none; height: 100%; position: relative; width: 100%; }",
];
var FramerHshAJZ_Fu = withCSS(Component, css, "framer-4Vp8H");
var stdin_default = FramerHshAJZ_Fu;
FramerHshAJZ_Fu.displayName = "Video";
FramerHshAJZ_Fu.defaultProps = {
	height: 627,
	width: 700,
};
addPropertyControls(FramerHshAJZ_Fu, {
	len7h9FB7: VideoControls?.["srcFile"] && {
		...VideoControls["srcFile"],
		__defaultAssetReference: "",
		description: void 0,
		hidden: void 0,
		title: "File",
	},
	kdIOn6qEt: {
		defaultValue:
			"https://framerusercontent.com/assets/MLWPbW1dUQawJLhhun3dBwpgJak.mp4",
		title: "URL",
		type: ControlType.String,
	},
});
addFonts(
	FramerHshAJZ_Fu,
	[
		{
			explicitInter: true,
			fonts: [],
		},
		...VideoFonts,
	],
	{
		supportsExplicitInterCodegen: true,
	},
);

// virtual:video
import { WithFramerBreakpoints } from "unframer";
import { jsx } from "react/jsx-runtime";
var locales = [];
var defaultResponsiveVariants = {};
/** @type {function(Props): any} */
function ComponentWithRoot({ locale, ...rest }) {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			{jsx(stdin_default, {
				...rest,
			})}
		</ContextProviders>
	);
}
/**
 * @type {import("unframer").UnframerBreakpoint}
 * Represents a responsive breakpoint for unframer.
 */

/**
 * @typedef VariantsMap
 * Partial record of UnframerBreakpoint to Props.variant, with a mandatory 'base' key.
 * { [key in UnframerBreakpoint]?: Props['variant'] } & { base: Props['variant'] }
 */

/**
 * Renders VideoFramerComponent for all breakpoints with a variants map. Variant prop is inferred per breakpoint.
 * @function
 * @param {Omit<Props, 'variant'> & {variants?: VariantsMap}} props
 * @returns {any}
 */
ComponentWithRoot.Responsive = ({ locale = "", ...rest }) => {
	return (
		<ContextProviders
			routes={routes}
			framerSiteId={
				"bee694db1d314f12b6cdffa60a360ffca3c14f0f2418539a656750f9a51be314"
			}
			locale={locale}
			locales={locales}
		>
			<WithFramerBreakpoints
				Component={stdin_default}
				variants={defaultResponsiveVariants}
				{...rest}
			/>
		</ContextProviders>
	);
};
Object.assign(ComponentWithRoot, stdin_default);
var video_default = ComponentWithRoot;
export { video_default as default };
